Figure 1 Packages with non-empty testing directory
Figure 1 Count of packages with files in standard testing directories by year a package was last updated. Testing directory "Yes" is determined by the presence of files matching the regular expression "[Tt]est[^/]*/.+"; if no matches are found for an R package, is it counted as a "No."


Figure 2 Packages with testing framework dependency
Figure 2 Count of dependencies on a testing package (RUnit, svUnit, testit, testthat, unitizer, unittest) by year a package was last updated. Packages with no stated dependency from their DESCRIPTION file for one of the specified packages are listed as 'none.'


Figure 3 Packages with non-empty src directory
Figure 3 Count of packages with files in standard source directories that has code to be compiled by year a package was last updated. Compiled directory "Yes" is determined by the presence of files matching the regular expression "src[^/]*/.+"; if no matches are found for an R package, is it counted as a "No."


Figure 4 Packages with optimization framework dependency
Figure 4 Count of dependencies on an optimization related package, see "OPTIMIZATION OF R PACKAGES" section for complete list, by year a package was last updated. Packages with no stated dependency from their DESCRIPTION file for one of the specified packages are listed as 'none.' In order to aid visual understanding of top dependencies, we limited display to  those packages that had 14 or more dependent packages.

Figure 5 Profvis Flame Graph
Figure 5 Visual depiction of memory allocation/deallocation, execution time, and call stack.

Figure 6 Profvis Data Chart
Figure 6 Table view of memory allocation/deallocation, execution time, and call stack.

Figure 7 Profvis Flame Graph .Call()
Figure 7 Visual depiction of memory allocation/deallocation, execution time, and call stack; note the limitations in detail at the .Call() function where custom compiled code is called.